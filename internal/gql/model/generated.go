// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"net/url"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/google/uuid"
)

type ArticleBlockCreateResult interface {
	IsArticleBlockCreateResult()
}

type ArticleBlockFindResult interface {
	IsArticleBlockFindResult()
}

type ArticleBlockInterface interface {
	IsArticleBlockInterface()
}

type ArticleBlockMoveResult interface {
	IsArticleBlockMoveResult()
}

type ArticleBlockUpdateResult interface {
	IsArticleBlockUpdateResult()
}

type ArticleContentResolvingResult interface {
	IsArticleContentResolvingResult()
}

type ArticleCreateResult interface {
	IsArticleCreateResult()
}

type ArticleFindResult interface {
	IsArticleFindResult()
}

type ArticleTagCreateResult interface {
	IsArticleTagCreateResult()
}

type ArticleTagMoveResult interface {
	IsArticleTagMoveResult()
}

type ArticleTagsResolvingResult interface {
	IsArticleTagsResolvingResult()
}

type ArticleUpdateResult interface {
	IsArticleUpdateResult()
}

type ImageDownloadResolvingResult interface {
	IsImageDownloadResolvingResult()
}

type ImageFindResult interface {
	IsImageFindResult()
}

type ImageResolvingResult interface {
	IsImageResolvingResult()
}

type ImageUploadResult interface {
	IsImageUploadResult()
}

type ProblemInterface interface {
	IsProblemInterface()
}

type ProjectCreateResult interface {
	IsProjectCreateResult()
}

type ProjectFindResult interface {
	IsProjectFindResult()
}

type ProjectResolvingResult interface {
	IsProjectResolvingResult()
}

type ProjectUpdateResult interface {
	IsProjectUpdateResult()
}

type TagCreateResult interface {
	IsTagCreateResult()
}

type TagFindResult interface {
	IsTagFindResult()
}

type TagResolvingResult interface {
	IsTagResolvingResult()
}

type TagUpdateResult interface {
	IsTagUpdateResult()
}

type TotalCountResolvingResult interface {
	IsTotalCountResolvingResult()
}

type VersionInterface interface {
	IsVersionInterface()
}

type Article struct {
	Content      ArticleContentResolvingResult `json:"content"`
	CoverImage   ImageResolvingResult          `json:"coverImage"`
	CoverImageID *uuid.UUID                    `json:"coverImageId"`
	CreatedAt    time.Time                     `json:"createdAt"`
	DeletedAt    *time.Time                    `json:"deletedAt"`
	ID           uuid.UUID                     `json:"id"`
	ModifiedAt   time.Time                     `json:"modifiedAt"`
	Project      ProjectResolvingResult        `json:"project"`
	ProjectID    uuid.UUID                     `json:"projectId"`
	Tags         ArticleTagsResolvingResult    `json:"tags"`
	Title        string                        `json:"title"`
	Version      uint                          `json:"version"`
}

func (Article) IsVersionInterface() {}

type ArticleBlockCreateInput struct {
	ArticleID uuid.UUID            `json:"articleId"`
	BlockType ArticleBlockTypeEnum `json:"blockType"`
	SortRank  *SortRankInput       `json:"sortRank"`
}

type ArticleBlockCreateOk struct {
	ArticleBlock ArticleBlockInterface `json:"articleBlock"`
}

func (ArticleBlockCreateOk) IsArticleBlockCreateResult() {}

type ArticleBlockDataInput struct {
	HTML  *ArticleBlockHTMLDataInput  `json:"html"`
	Image *ArticleBlockImageDataInput `json:"image"`
}

type ArticleBlockFindFilterInput struct {
	ArticleIDAnyOf []uuid.UUID            `json:"articleIdAnyOf"`
	IDAnyOf        []uuid.UUID            `json:"idAnyOf"`
	TypeAnyOf      []ArticleBlockTypeEnum `json:"typeAnyOf"`
}

type ArticleBlockFindList struct {
	Items      []ArticleBlockInterface   `json:"items"`
	TotalCount TotalCountResolvingResult `json:"totalCount"`
}

func (ArticleBlockFindList) IsArticleBlockFindResult() {}

type ArticleBlockHTML struct {
	CreatedAt  time.Time             `json:"createdAt"`
	Data       *ArticleBlockHTMLData `json:"data"`
	DeletedAt  *time.Time            `json:"deletedAt"`
	ID         uuid.UUID             `json:"id"`
	ModifiedAt time.Time             `json:"modifiedAt"`
	SortRank   string                `json:"sortRank"`
	Version    uint                  `json:"version"`
}

func (ArticleBlockHTML) IsArticleBlockInterface() {}
func (ArticleBlockHTML) IsVersionInterface()      {}

type ArticleBlockHTMLData struct {
	Body string `json:"body"`
}

type ArticleBlockHTMLDataInput struct {
	Body string `json:"body"`
}

type ArticleBlockImage struct {
	CreatedAt  time.Time              `json:"createdAt"`
	Data       *ArticleBlockImageData `json:"data"`
	DeletedAt  *time.Time             `json:"deletedAt"`
	ID         uuid.UUID              `json:"id"`
	ModifiedAt time.Time              `json:"modifiedAt"`
	SortRank   string                 `json:"sortRank"`
	Version    uint                   `json:"version"`
}

func (ArticleBlockImage) IsArticleBlockInterface() {}
func (ArticleBlockImage) IsVersionInterface()      {}

type ArticleBlockImageData struct {
	Image       ImageResolvingResult `json:"image"`
	ImageID     *uuid.UUID           `json:"imageId"`
	Copyright   *string              `json:"copyright"`
	Description *string              `json:"description"`
}

type ArticleBlockImageDataInput struct {
	ImageID     *uuid.UUID `json:"imageId"`
	Copyright   *string    `json:"copyright"`
	Description *string    `json:"description"`
}

type ArticleBlockMoveInput struct {
	ID       uuid.UUID      `json:"id"`
	SortRank *SortRankInput `json:"sortRank"`
	Version  uint           `json:"version"`
}

type ArticleBlockMoveOk struct {
	SortRank string `json:"sortRank"`
	Version  uint   `json:"version"`
}

func (ArticleBlockMoveOk) IsArticleBlockMoveResult() {}

type ArticleBlockMutation struct {
	Create ArticleBlockCreateResult `json:"create"`
	Move   ArticleBlockMoveResult   `json:"move"`
	Update ArticleBlockUpdateResult `json:"update"`
}

type ArticleBlockNotFoundProblem struct {
	Message string `json:"message"`
}

func (ArticleBlockNotFoundProblem) IsProblemInterface()         {}
func (ArticleBlockNotFoundProblem) IsArticleBlockMoveResult()   {}
func (ArticleBlockNotFoundProblem) IsArticleBlockUpdateResult() {}

type ArticleBlockQuery struct {
	Find ArticleBlockFindResult `json:"find"`
}

type ArticleBlockTypeMismatchProblem struct {
	Message string `json:"message"`
}

func (ArticleBlockTypeMismatchProblem) IsProblemInterface()         {}
func (ArticleBlockTypeMismatchProblem) IsArticleBlockUpdateResult() {}

type ArticleBlockUpdateInput struct {
	ID      uuid.UUID              `json:"id"`
	Data    *ArticleBlockDataInput `json:"data"`
	Version uint                   `json:"version"`
}

type ArticleBlockUpdateOk struct {
	ArticleBlock ArticleBlockInterface `json:"articleBlock"`
}

func (ArticleBlockUpdateOk) IsArticleBlockUpdateResult() {}

type ArticleContent struct {
	Blocks []ArticleBlockInterface `json:"blocks"`
}

func (ArticleContent) IsArticleContentResolvingResult() {}

type ArticleCreateInput struct {
	ProjectID uuid.UUID `json:"projectId"`
}

type ArticleCreateOk struct {
	Article *Article `json:"article"`
}

func (ArticleCreateOk) IsArticleCreateResult() {}

type ArticleFindFilterInput struct {
	IDAnyOf []uuid.UUID `json:"idAnyOf"`
}

type ArticleFindList struct {
	Items      []*Article                `json:"items"`
	TotalCount TotalCountResolvingResult `json:"totalCount"`
}

func (ArticleFindList) IsArticleFindResult() {}

type ArticleMutation struct {
	Create ArticleCreateResult `json:"create"`
	Update ArticleUpdateResult `json:"update"`
}

type ArticleNotFoundProblem struct {
	Message string `json:"message"`
}

func (ArticleNotFoundProblem) IsProblemInterface()         {}
func (ArticleNotFoundProblem) IsArticleBlockCreateResult() {}
func (ArticleNotFoundProblem) IsArticleUpdateResult()      {}
func (ArticleNotFoundProblem) IsArticleTagCreateResult()   {}

type ArticleQuery struct {
	Find ArticleFindResult `json:"find"`
}

type ArticleTag struct {
	ArticleID  uuid.UUID          `json:"articleID"`
	CreatedAt  time.Time          `json:"createdAt"`
	ID         uuid.UUID          `json:"id"`
	ModifiedAt time.Time          `json:"modifiedAt"`
	SortRank   string             `json:"sortRank"`
	Tag        TagResolvingResult `json:"tag"`
	TagID      uuid.UUID          `json:"tagId"`
	Version    uint               `json:"version"`
}

func (ArticleTag) IsVersionInterface() {}

type ArticleTagAlreadyExistsProblem struct {
	Message string `json:"message"`
}

func (ArticleTagAlreadyExistsProblem) IsProblemInterface()       {}
func (ArticleTagAlreadyExistsProblem) IsArticleTagCreateResult() {}

type ArticleTagCreateInput struct {
	ArticleID uuid.UUID      `json:"articleId"`
	TagID     uuid.UUID      `json:"tagId"`
	SortRank  *SortRankInput `json:"sortRank"`
}

type ArticleTagCreateOk struct {
	ArticleTag *ArticleTag `json:"articleTag"`
}

func (ArticleTagCreateOk) IsArticleTagCreateResult() {}

type ArticleTagList struct {
	Items []*ArticleTag `json:"items"`
}

func (ArticleTagList) IsArticleTagsResolvingResult() {}

type ArticleTagMoveInput struct {
	ID       uuid.UUID      `json:"id"`
	SortRank *SortRankInput `json:"sortRank"`
	Version  uint           `json:"version"`
}

type ArticleTagMoveOk struct {
	SortRank string `json:"sortRank"`
	Version  uint   `json:"version"`
}

func (ArticleTagMoveOk) IsArticleTagMoveResult() {}

type ArticleTagMutation struct {
	Create ArticleTagCreateResult `json:"create"`
	Move   ArticleTagMoveResult   `json:"move"`
}

type ArticleTagNotFoundProblem struct {
	Message string `json:"message"`
}

func (ArticleTagNotFoundProblem) IsProblemInterface()     {}
func (ArticleTagNotFoundProblem) IsArticleTagMoveResult() {}

type ArticleUpdateInput struct {
	ID           uuid.UUID  `json:"id"`
	CoverImageID *uuid.UUID `json:"coverImageId"`
	Title        string     `json:"title"`
	Version      uint       `json:"version"`
}

type ArticleUpdateOk struct {
	Article *Article `json:"article"`
}

func (ArticleUpdateOk) IsArticleUpdateResult() {}

type Image struct {
	Assets     []*ImageAsset                `json:"assets"`
	CreatedAt  time.Time                    `json:"createdAt"`
	DeletedAt  *time.Time                   `json:"deletedAt"`
	Type       string                       `json:"type"`
	Height     uint                         `json:"height"`
	ID         uuid.UUID                    `json:"id"`
	ModifiedAt time.Time                    `json:"modifiedAt"`
	Download   ImageDownloadResolvingResult `json:"download"`
	Version    uint                         `json:"version"`
	Width      uint                         `json:"width"`
}

func (Image) IsVersionInterface()     {}
func (Image) IsImageResolvingResult() {}

type ImageAsset struct {
	Format ImageAssetFormat `json:"format"`
	Width  ImageAssetWidth  `json:"width"`
	URL    url.URL          `json:"url"`
}

type ImageDownload struct {
	URL url.URL `json:"url"`
}

func (ImageDownload) IsImageDownloadResolvingResult() {}

type ImageFindFilterInput struct {
	IDAnyOf []uuid.UUID `json:"idAnyOf"`
}

type ImageFindList struct {
	Items      []*Image                  `json:"items"`
	TotalCount TotalCountResolvingResult `json:"totalCount"`
}

func (ImageFindList) IsImageFindResult() {}

type ImageMutation struct {
	Upload ImageUploadResult `json:"upload"`
}

type ImageNotFoundProblem struct {
	Message string `json:"message"`
}

func (ImageNotFoundProblem) IsProblemInterface()     {}
func (ImageNotFoundProblem) IsImageResolvingResult() {}

type ImageNotRecognizedProblem struct {
	Message string `json:"message"`
}

func (ImageNotRecognizedProblem) IsProblemInterface()  {}
func (ImageNotRecognizedProblem) IsImageUploadResult() {}

type ImageNotSupportedTypeProblem struct {
	Message string `json:"message"`
}

func (ImageNotSupportedTypeProblem) IsProblemInterface()  {}
func (ImageNotSupportedTypeProblem) IsImageUploadResult() {}

type ImageQuery struct {
	Find ImageFindResult `json:"find"`
}

type ImageUploadInput struct {
	File *graphql.Upload `json:"file"`
}

type ImageUploadOk struct {
	Image *Image `json:"image"`
}

func (ImageUploadOk) IsImageUploadResult() {}

type InternalErrorProblem struct {
	Message string `json:"message"`
}

func (InternalErrorProblem) IsArticleContentResolvingResult() {}
func (InternalErrorProblem) IsArticleTagsResolvingResult()    {}
func (InternalErrorProblem) IsArticleBlockCreateResult()      {}
func (InternalErrorProblem) IsArticleBlockMoveResult()        {}
func (InternalErrorProblem) IsArticleBlockUpdateResult()      {}
func (InternalErrorProblem) IsArticleBlockFindResult()        {}
func (InternalErrorProblem) IsArticleCreateResult()           {}
func (InternalErrorProblem) IsArticleUpdateResult()           {}
func (InternalErrorProblem) IsArticleFindResult()             {}
func (InternalErrorProblem) IsArticleTagCreateResult()        {}
func (InternalErrorProblem) IsArticleTagMoveResult()          {}
func (InternalErrorProblem) IsImageResolvingResult()          {}
func (InternalErrorProblem) IsImageDownloadResolvingResult()  {}
func (InternalErrorProblem) IsImageUploadResult()             {}
func (InternalErrorProblem) IsImageFindResult()               {}
func (InternalErrorProblem) IsProblemInterface()              {}
func (InternalErrorProblem) IsProjectResolvingResult()        {}
func (InternalErrorProblem) IsProjectCreateResult()           {}
func (InternalErrorProblem) IsProjectUpdateResult()           {}
func (InternalErrorProblem) IsProjectFindResult()             {}
func (InternalErrorProblem) IsTagResolvingResult()            {}
func (InternalErrorProblem) IsTagCreateResult()               {}
func (InternalErrorProblem) IsTagUpdateResult()               {}
func (InternalErrorProblem) IsTagFindResult()                 {}
func (InternalErrorProblem) IsTotalCountResolvingResult()     {}

type InvalidSortRankProblem struct {
	Message string `json:"message"`
}

func (InvalidSortRankProblem) IsArticleBlockCreateResult() {}
func (InvalidSortRankProblem) IsArticleBlockMoveResult()   {}
func (InvalidSortRankProblem) IsArticleTagCreateResult()   {}
func (InvalidSortRankProblem) IsArticleTagMoveResult()     {}
func (InvalidSortRankProblem) IsProblemInterface()         {}

type Project struct {
	CreatedAt  time.Time  `json:"createdAt"`
	DeletedAt  *time.Time `json:"deletedAt"`
	ID         uuid.UUID  `json:"id"`
	ModifiedAt time.Time  `json:"modifiedAt"`
	Name       string     `json:"name"`
	Version    uint       `json:"version"`
}

func (Project) IsVersionInterface()       {}
func (Project) IsProjectResolvingResult() {}

type ProjectAlreadyExistsProblem struct {
	Message string `json:"message"`
}

func (ProjectAlreadyExistsProblem) IsProblemInterface()    {}
func (ProjectAlreadyExistsProblem) IsProjectCreateResult() {}

type ProjectCreateInput struct {
	Name string `json:"name"`
}

type ProjectCreateOk struct {
	Project *Project `json:"project"`
}

func (ProjectCreateOk) IsProjectCreateResult() {}

type ProjectFindFilterInput struct {
	IDAnyOf []uuid.UUID `json:"idAnyOf"`
}

type ProjectFindList struct {
	Items      []*Project                `json:"items"`
	TotalCount TotalCountResolvingResult `json:"totalCount"`
}

func (ProjectFindList) IsProjectFindResult() {}

type ProjectMutation struct {
	Create ProjectCreateResult `json:"create"`
	Update ProjectUpdateResult `json:"update"`
}

type ProjectNotFoundProblem struct {
	Message string `json:"message"`
}

func (ProjectNotFoundProblem) IsArticleCreateResult()    {}
func (ProjectNotFoundProblem) IsProblemInterface()       {}
func (ProjectNotFoundProblem) IsProjectResolvingResult() {}
func (ProjectNotFoundProblem) IsProjectUpdateResult()    {}

type ProjectQuery struct {
	Find ProjectFindResult `json:"find"`
}

type ProjectUpdateInput struct {
	ID      uuid.UUID `json:"id"`
	Name    string    `json:"name"`
	Version uint      `json:"version"`
}

type ProjectUpdateOk struct {
	Project *Project `json:"project"`
}

func (ProjectUpdateOk) IsProjectUpdateResult() {}

type SortRankInput struct {
	Prev string `json:"prev"`
	Next string `json:"next"`
}

type Tag struct {
	CreatedAt  time.Time  `json:"createdAt"`
	DeletedAt  *time.Time `json:"deletedAt"`
	ID         uuid.UUID  `json:"id"`
	ModifiedAt time.Time  `json:"modifiedAt"`
	Name       string     `json:"name"`
	Version    uint       `json:"version"`
}

func (Tag) IsVersionInterface()   {}
func (Tag) IsTagResolvingResult() {}

type TagAlreadyExistsProblem struct {
	Message string `json:"message"`
}

func (TagAlreadyExistsProblem) IsProblemInterface() {}
func (TagAlreadyExistsProblem) IsTagCreateResult()  {}

type TagCreateInput struct {
	Name string `json:"name"`
}

type TagCreateOk struct {
	Tag *Tag `json:"tag"`
}

func (TagCreateOk) IsTagCreateResult() {}

type TagFindFilterInput struct {
	IDAnyOf []uuid.UUID `json:"idAnyOf"`
}

type TagFindList struct {
	Items      []*Tag                    `json:"items"`
	TotalCount TotalCountResolvingResult `json:"totalCount"`
}

func (TagFindList) IsTagFindResult() {}

type TagMutation struct {
	Create TagCreateResult `json:"create"`
	Update TagUpdateResult `json:"update"`
}

type TagNotFoundProblem struct {
	Message string `json:"message"`
}

func (TagNotFoundProblem) IsArticleTagCreateResult() {}
func (TagNotFoundProblem) IsProblemInterface()       {}
func (TagNotFoundProblem) IsTagResolvingResult()     {}
func (TagNotFoundProblem) IsTagUpdateResult()        {}

type TagQuery struct {
	Find TagFindResult `json:"find"`
}

type TagUpdateInput struct {
	ID      uuid.UUID `json:"id"`
	Name    string    `json:"name"`
	Version uint      `json:"version"`
}

type TagUpdateOk struct {
	Tag *Tag `json:"tag"`
}

func (TagUpdateOk) IsTagUpdateResult() {}

type TotalCount struct {
	Value uint `json:"value"`
}

func (TotalCount) IsTotalCountResolvingResult() {}

type VersionMismatchProblem struct {
	Message string `json:"message"`
}

func (VersionMismatchProblem) IsArticleBlockMoveResult()   {}
func (VersionMismatchProblem) IsArticleBlockUpdateResult() {}
func (VersionMismatchProblem) IsArticleUpdateResult()      {}
func (VersionMismatchProblem) IsArticleTagMoveResult()     {}
func (VersionMismatchProblem) IsProjectUpdateResult()      {}
func (VersionMismatchProblem) IsTagUpdateResult()          {}
func (VersionMismatchProblem) IsProblemInterface()         {}

type ArticleBlockFindSortEnum string

const (
	ArticleBlockFindSortEnumCreatedAtAsc  ArticleBlockFindSortEnum = "CREATED_AT_ASC"
	ArticleBlockFindSortEnumCreatedAtDesc ArticleBlockFindSortEnum = "CREATED_AT_DESC"
	ArticleBlockFindSortEnumSortRankAsc   ArticleBlockFindSortEnum = "SORT_RANK_ASC"
	ArticleBlockFindSortEnumSortRankDesc  ArticleBlockFindSortEnum = "SORT_RANK_DESC"
)

var AllArticleBlockFindSortEnum = []ArticleBlockFindSortEnum{
	ArticleBlockFindSortEnumCreatedAtAsc,
	ArticleBlockFindSortEnumCreatedAtDesc,
	ArticleBlockFindSortEnumSortRankAsc,
	ArticleBlockFindSortEnumSortRankDesc,
}

func (e ArticleBlockFindSortEnum) IsValid() bool {
	switch e {
	case ArticleBlockFindSortEnumCreatedAtAsc, ArticleBlockFindSortEnumCreatedAtDesc, ArticleBlockFindSortEnumSortRankAsc, ArticleBlockFindSortEnumSortRankDesc:
		return true
	}
	return false
}

func (e ArticleBlockFindSortEnum) String() string {
	return string(e)
}

func (e *ArticleBlockFindSortEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ArticleBlockFindSortEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ArticleBlockFindSortEnum", str)
	}
	return nil
}

func (e ArticleBlockFindSortEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ArticleBlockTypeEnum string

const (
	ArticleBlockTypeEnumHTML  ArticleBlockTypeEnum = "HTML"
	ArticleBlockTypeEnumImage ArticleBlockTypeEnum = "IMAGE"
)

var AllArticleBlockTypeEnum = []ArticleBlockTypeEnum{
	ArticleBlockTypeEnumHTML,
	ArticleBlockTypeEnumImage,
}

func (e ArticleBlockTypeEnum) IsValid() bool {
	switch e {
	case ArticleBlockTypeEnumHTML, ArticleBlockTypeEnumImage:
		return true
	}
	return false
}

func (e ArticleBlockTypeEnum) String() string {
	return string(e)
}

func (e *ArticleBlockTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ArticleBlockTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ArticleBlockTypeEnum", str)
	}
	return nil
}

func (e ArticleBlockTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ArticleFindSortEnum string

const (
	ArticleFindSortEnumCreatedAtAsc  ArticleFindSortEnum = "CREATED_AT_ASC"
	ArticleFindSortEnumCreatedAtDesc ArticleFindSortEnum = "CREATED_AT_DESC"
)

var AllArticleFindSortEnum = []ArticleFindSortEnum{
	ArticleFindSortEnumCreatedAtAsc,
	ArticleFindSortEnumCreatedAtDesc,
}

func (e ArticleFindSortEnum) IsValid() bool {
	switch e {
	case ArticleFindSortEnumCreatedAtAsc, ArticleFindSortEnumCreatedAtDesc:
		return true
	}
	return false
}

func (e ArticleFindSortEnum) String() string {
	return string(e)
}

func (e *ArticleFindSortEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ArticleFindSortEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ArticleFindSortEnum", str)
	}
	return nil
}

func (e ArticleFindSortEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ImageAssetFormat string

const (
	ImageAssetFormatAvif ImageAssetFormat = "AVIF"
	ImageAssetFormatJpeg ImageAssetFormat = "JPEG"
	ImageAssetFormatPng  ImageAssetFormat = "PNG"
	ImageAssetFormatWebp ImageAssetFormat = "WEBP"
)

var AllImageAssetFormat = []ImageAssetFormat{
	ImageAssetFormatAvif,
	ImageAssetFormatJpeg,
	ImageAssetFormatPng,
	ImageAssetFormatWebp,
}

func (e ImageAssetFormat) IsValid() bool {
	switch e {
	case ImageAssetFormatAvif, ImageAssetFormatJpeg, ImageAssetFormatPng, ImageAssetFormatWebp:
		return true
	}
	return false
}

func (e ImageAssetFormat) String() string {
	return string(e)
}

func (e *ImageAssetFormat) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageAssetFormat(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageAssetFormat", str)
	}
	return nil
}

func (e ImageAssetFormat) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ImageAssetWidth string

const (
	ImageAssetWidthW320  ImageAssetWidth = "W320"
	ImageAssetWidthW768  ImageAssetWidth = "W768"
	ImageAssetWidthW1024 ImageAssetWidth = "W1024"
	ImageAssetWidthW1280 ImageAssetWidth = "W1280"
	ImageAssetWidthW1366 ImageAssetWidth = "W1366"
	ImageAssetWidthW1600 ImageAssetWidth = "W1600"
	ImageAssetWidthW1920 ImageAssetWidth = "W1920"
	ImageAssetWidthW2560 ImageAssetWidth = "W2560"
)

var AllImageAssetWidth = []ImageAssetWidth{
	ImageAssetWidthW320,
	ImageAssetWidthW768,
	ImageAssetWidthW1024,
	ImageAssetWidthW1280,
	ImageAssetWidthW1366,
	ImageAssetWidthW1600,
	ImageAssetWidthW1920,
	ImageAssetWidthW2560,
}

func (e ImageAssetWidth) IsValid() bool {
	switch e {
	case ImageAssetWidthW320, ImageAssetWidthW768, ImageAssetWidthW1024, ImageAssetWidthW1280, ImageAssetWidthW1366, ImageAssetWidthW1600, ImageAssetWidthW1920, ImageAssetWidthW2560:
		return true
	}
	return false
}

func (e ImageAssetWidth) String() string {
	return string(e)
}

func (e *ImageAssetWidth) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageAssetWidth(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageAssetWidth", str)
	}
	return nil
}

func (e ImageAssetWidth) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ImageFindSortEnum string

const (
	ImageFindSortEnumCreatedAtAsc  ImageFindSortEnum = "CREATED_AT_ASC"
	ImageFindSortEnumCreatedAtDesc ImageFindSortEnum = "CREATED_AT_DESC"
)

var AllImageFindSortEnum = []ImageFindSortEnum{
	ImageFindSortEnumCreatedAtAsc,
	ImageFindSortEnumCreatedAtDesc,
}

func (e ImageFindSortEnum) IsValid() bool {
	switch e {
	case ImageFindSortEnumCreatedAtAsc, ImageFindSortEnumCreatedAtDesc:
		return true
	}
	return false
}

func (e ImageFindSortEnum) String() string {
	return string(e)
}

func (e *ImageFindSortEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageFindSortEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageFindSortEnum", str)
	}
	return nil
}

func (e ImageFindSortEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProjectFindSortEnum string

const (
	ProjectFindSortEnumNameAsc       ProjectFindSortEnum = "NAME_ASC"
	ProjectFindSortEnumNameDesc      ProjectFindSortEnum = "NAME_DESC"
	ProjectFindSortEnumCreatedAtAsc  ProjectFindSortEnum = "CREATED_AT_ASC"
	ProjectFindSortEnumCreatedAtDesc ProjectFindSortEnum = "CREATED_AT_DESC"
)

var AllProjectFindSortEnum = []ProjectFindSortEnum{
	ProjectFindSortEnumNameAsc,
	ProjectFindSortEnumNameDesc,
	ProjectFindSortEnumCreatedAtAsc,
	ProjectFindSortEnumCreatedAtDesc,
}

func (e ProjectFindSortEnum) IsValid() bool {
	switch e {
	case ProjectFindSortEnumNameAsc, ProjectFindSortEnumNameDesc, ProjectFindSortEnumCreatedAtAsc, ProjectFindSortEnumCreatedAtDesc:
		return true
	}
	return false
}

func (e ProjectFindSortEnum) String() string {
	return string(e)
}

func (e *ProjectFindSortEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectFindSortEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectFindSortEnum", str)
	}
	return nil
}

func (e ProjectFindSortEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TagFindSortEnum string

const (
	TagFindSortEnumNameAsc       TagFindSortEnum = "NAME_ASC"
	TagFindSortEnumNameDesc      TagFindSortEnum = "NAME_DESC"
	TagFindSortEnumCreatedAtAsc  TagFindSortEnum = "CREATED_AT_ASC"
	TagFindSortEnumCreatedAtDesc TagFindSortEnum = "CREATED_AT_DESC"
)

var AllTagFindSortEnum = []TagFindSortEnum{
	TagFindSortEnumNameAsc,
	TagFindSortEnumNameDesc,
	TagFindSortEnumCreatedAtAsc,
	TagFindSortEnumCreatedAtDesc,
}

func (e TagFindSortEnum) IsValid() bool {
	switch e {
	case TagFindSortEnumNameAsc, TagFindSortEnumNameDesc, TagFindSortEnumCreatedAtAsc, TagFindSortEnumCreatedAtDesc:
		return true
	}
	return false
}

func (e TagFindSortEnum) String() string {
	return string(e)
}

func (e *TagFindSortEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TagFindSortEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TagFindSortEnum", str)
	}
	return nil
}

func (e TagFindSortEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
